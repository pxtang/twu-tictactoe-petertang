import java.io.BufferedReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'ptang' at '8/6/15 1:21 PM' with Gradle 2.5
 *
 * @author ptang, @date 8/6/15 1:21 PM
 */
public class TicTacToe {
    private static final int DIMENSION_NUM = 3;

    private PrintStream printStream;
    private BufferedReader bufferedReader;
    private List<String> moveGrid;
    private Player player1;
    private Player player2;

    private int emptySpots;
    private BoardDrawer boardDrawer;

    public TicTacToe(PrintStream printStream, BufferedReader inputStream, ArrayList<String> moveGrid) {

        this.printStream = printStream;
        this.bufferedReader = inputStream;
        emptySpots = 9;

        this.moveGrid = moveGrid;
        MoveGridSetup.prepare(this.moveGrid);
        boardDrawer = new BoardDrawer(this.moveGrid, printStream);
        player1 = new Player(this.moveGrid,System.out, inputStream, 1);
        player2 = new Player(this.moveGrid,System.out, inputStream, 2);
//        player2 = new CountingAI(this.moveGrid,System.out, 2);
    }

    public void start() {
        boardDrawer.draw();
    }

    public void play() {
        boolean hasWinner = false;
        int lastMove;
        int winnerNum = 0;
        while(emptySpots > 0 && !hasWinner) {
            lastMove = update(moveGrid, player1);
            hasWinner = checkWin(lastMove);
            if (hasWinner) {
                winnerNum = 1;
                break;
            }

            if (emptySpots > 0) {
                lastMove = update(moveGrid, player2);
                hasWinner = checkWin(lastMove);
                if (hasWinner) {
                    winnerNum = 2;
                    break;
                }
            }
        }

        if (winnerNum == 0) {
            printStream.println("Game is a draw");
        } else {
            printStream.println("Player " + winnerNum + " Wins!");
        }
    }

    private boolean checkMoveSet(String[] moves) {
        return moves[0].equals(moves[1]) && moves[0].equals(moves[2]);
    }

    private boolean checkWin(int lastMove) { // uses array indices
        int columnNumber = lastMove % DIMENSION_NUM;
        String[] movesInColumn = {moveGrid.get(columnNumber), moveGrid.get(columnNumber+3), moveGrid.get(columnNumber+6)};
        if (checkMoveSet(movesInColumn)) {
            return true;
        }

        int rowNumber = lastMove / DIMENSION_NUM;
        int rowStartIndex = rowNumber * 3;
        String[] movesInRow = {moveGrid.get(rowStartIndex), moveGrid.get(rowStartIndex+1), moveGrid.get(rowStartIndex+2)};
        if (checkMoveSet(movesInRow)) {
            return true;
        }

        if (lastMove % 2 == 0) { // on a diagonal
            if (lastMove % 4 == 0) {
                String[] movesInSEDiagonal = {moveGrid.get(0), moveGrid.get(4), moveGrid.get(8)};
                if (checkMoveSet(movesInSEDiagonal)) {
                    return true;
                }
            } else if (lastMove == 2 || lastMove == 4 || lastMove == 6) {
                String[] movesInSWDiagonal = {moveGrid.get(2), moveGrid.get(4), moveGrid.get(6)};
                if (checkMoveSet(movesInSWDiagonal)) {
                    return true;
                }
            }

        }

        return false;
    }

    public int update(List<String> moveGrid, Player player) {
        player.prompt();
        int lastMove = player.inputMove();
        player.move(lastMove);
        emptySpots--;
        boardDrawer.draw();
        return lastMove;
    }

}
