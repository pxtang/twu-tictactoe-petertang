import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'ptang' at '8/6/15 1:21 PM' with Gradle 2.5
 *
 * @author ptang, @date 8/6/15 1:21 PM
 */
public class TicTacToe {
    private final String BOARD_ROW = " %s | %s | %s\n";
    private final String BOARD_LINE = "-----------\n";
    private final int MAX_BOARD_ROWS = 5;
    private final int SPOTS_IN_ROW = 3;

    private PrintStream printStream;
    private BufferedReader bufferedReader;
    private List<String> moveGrid;
    private Player player1;
    private Player player2;

    private int emptySpots;

    public TicTacToe(PrintStream printStream, BufferedReader inputStream) {

        this.printStream = printStream;
        this.bufferedReader = inputStream;
        emptySpots = 9;

        moveGrid = new ArrayList<>();
        setUpMoveGrid(moveGrid);
        player1 = new Player(moveGrid,System.out, inputStream, 1);
        player2 = new Player(moveGrid,System.out, inputStream, 2);
    }

    public void start() {
        printStream.print(produceBoard(moveGrid));
    }

    public void play() {
        while(emptySpots > 0) {
            update(moveGrid, player1);
            if (emptySpots > 0) {
                update(moveGrid, player2);
            }
        }

        if (emptySpots == 0) {
            printStream.println("Game is a draw");
        }
    }

    public void update(List<String> moveGrid, Player player) {
        player.prompt();
        player.move();
        emptySpots--;
        printStream.print(produceBoard(moveGrid));
    }

    private void setUpMoveGrid(List<String> moveGrid) {
        for (int i = 0; i < emptySpots; i++) {
            moveGrid.add(" ");
        }
    }

    private String produceBoard(List<String> moveGrid) {
        String board = "";
        for (int i = 0; i < MAX_BOARD_ROWS; i++) {
            if (i % 2 == 0) {
                board += produceRow(moveGrid,i);
            } else {
                board += BOARD_LINE;
            }
        }

        return board;
    }

    private String produceRow(List<String> moveGrid, int rowNumber) {
        rowNumber /= 2;
        return String.format(BOARD_ROW,
                moveGrid.get(rowNumber*SPOTS_IN_ROW),
                moveGrid.get(rowNumber*SPOTS_IN_ROW + 1),
                moveGrid.get(rowNumber*SPOTS_IN_ROW + 2));
    }
}
